{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Navigate}from\"react-router-dom\";import useLoginContext from\"../hooks/useLoginContext\";// Verifica se quem ta tentando acessar é um cliente, se não ele redireciona para a página anterior\nimport{jsx as _jsx}from\"react/jsx-runtime\";export default function ClientRoutes(_ref){let{children}=_ref;const{userType}=useLoginContext();// useEffect(()=>{\n//     setIsAdmin(JSON.parse(localStorage.getItem(\"isAdmin\")))\n// },[])\n// Está vazio enquanto a autenticação do cliente não é feita:\nreturn userType==='cli'?/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full\",children:children}):/*#__PURE__*/_jsx(Navigate,{to:'/'});}","map":{"version":3,"names":["React","useEffect","useState","Navigate","useLoginContext","jsx","_jsx","ClientRoutes","_ref","children","userType","className","to"],"sources":["/home/abraao/Desktop/nullbank_client/client/src/rotas/ClientRoutes.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport useLoginContext from \"../hooks/useLoginContext\";\n// Verifica se quem ta tentando acessar é um cliente, se não ele redireciona para a página anterior\nexport default function ClientRoutes({ children }){\n    const { userType } = useLoginContext()\n    // useEffect(()=>{\n    //     setIsAdmin(JSON.parse(localStorage.getItem(\"isAdmin\")))\n    // },[])\n// Está vazio enquanto a autenticação do cliente não é feita:\n    return userType === 'cli' ? (\n        <div className=\"w-full h-full\">\n            {children}\n        </div>\n    ):(\n        <Navigate to={'/'}/>\n    )\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,SAAS,CAAEC,QAAQ,KAAO,OAAO,CAChD,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,MAAO,CAAAC,eAAe,KAAM,0BAA0B,CACtD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,cAAe,SAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAc,IAAb,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC7C,KAAM,CAAEE,QAAS,CAAC,CAAGN,eAAe,CAAC,CAAC,CACtC;AACA;AACA;AACJ;AACI,MAAO,CAAAM,QAAQ,GAAK,KAAK,cACrBJ,IAAA,QAAKK,SAAS,CAAC,eAAe,CAAAF,QAAA,CACzBA,QAAQ,CACR,CAAC,cAENH,IAAA,CAACH,QAAQ,EAACS,EAAE,CAAE,GAAI,CAAC,CACtB,CACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}