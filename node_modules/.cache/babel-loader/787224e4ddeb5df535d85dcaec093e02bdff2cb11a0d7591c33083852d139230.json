{"ast":null,"code":"import{createContext,useState,useRef}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";export const LoginContext=/*#__PURE__*/createContext(null);// Esse contexto vai ter um estado com o tipo do usuário que envolve toda a aplicação\n// Adiciona usuários ao banco, verificando se o cpf e rg ja são existentes, caso seja ele avisa\n// Faz as requisições relacionadas a clientes\nexport const LoginProvider=_ref=>{let{children}=_ref;const users=useRef([{}]);const adminUser={user:'Admin',password:'1234'};const[userType,setUserType]=useState('');const userLogOut=()=>{setUserType('');localStorage.removeItem('UserData');};const autenticarTipoUsuario=async(data,tipo)=>{if(tipo==='dba'){if(isAdmin(data)){setUserType('dba');localStorage.setItem('UserData',JSON.stringify(data));return true;}else{return false;}}else if(tipo==='funcionario'){usuarioExistente(data,tipo).then(dados=>{if(dados.success){setUserType('func');localStorage.setItem('UserData',JSON.stringify(data));return true;}else{return false;}});}else if(tipo==='cliente'){usuarioExistente(data,tipo).then(dados=>{if(dados.success){setUserType('cli');localStorage.setItem('UserData',JSON.stringify(data));return true;}else{return false;}});}};// const senhasFunc = async()=>{\n//     try{\n//         const response = await axios.get('http://localhost:8800//matSenhas')\n//     }catch(error){\n//         console.log(error);\n//     }\n// }\nconst isAdmin=data=>{return data.key===adminUser.user&&data.password===adminUser.password;};// Aqui é onde fica a validação de usuários do tipo cliente e funcionário Davi:\nconst usuarioExistente=async(data,tipo)=>{try{const resposta=await axios.post(\"http://localhost:8800/validarLogin\",{key:data.key,senha:data.password,tipo_usuario:tipo});return resposta.data;}catch(err){console.log(err);}};// Verifica se o CPF está cadastrado no BD:\nconst existeCpf=async cpf=>{try{users.current=[{}];const response=await axios.get('http://localhost:8800/clientes');users.current=response.data.filter(cliente=>cliente.cpf===cpf);return users.current.length===1;}catch(error){alert(error);}};return/*#__PURE__*/_jsx(LoginContext.Provider,{value:{autenticarTipoUsuario,userType,userLogOut,existeCpf},children:children});};","map":{"version":3,"names":["createContext","useState","useRef","axios","jsx","_jsx","LoginContext","LoginProvider","_ref","children","users","adminUser","user","password","userType","setUserType","userLogOut","localStorage","removeItem","autenticarTipoUsuario","data","tipo","isAdmin","setItem","JSON","stringify","usuarioExistente","then","dados","success","key","resposta","post","senha","tipo_usuario","err","console","log","existeCpf","cpf","current","response","get","filter","cliente","length","error","alert","Provider","value"],"sources":["/home/abraao/Desktop/nullbank_client/client/src/context/loginContext.js"],"sourcesContent":["import { createContext, useState, useRef } from \"react\";\nimport axios from \"axios\";\n\nexport const LoginContext = createContext(null)\n// Esse contexto vai ter um estado com o tipo do usuário que envolve toda a aplicação\n// Adiciona usuários ao banco, verificando se o cpf e rg ja são existentes, caso seja ele avisa\n// Faz as requisições relacionadas a clientes\nexport const LoginProvider= ({children}) => {\n    const users = useRef([{}])\n    const adminUser = {\n        user: 'Admin',\n        password: '1234'\n    }\n    const [userType, setUserType] = useState('')\n\n    const userLogOut = ()=>{\n        setUserType('')\n        localStorage.removeItem('UserData')\n    }\n\n    const autenticarTipoUsuario = async (data, tipo)=>{\n        if(tipo === 'dba'){\n            if(isAdmin(data)){\n                setUserType('dba')\n                localStorage.setItem('UserData', JSON.stringify(data))\n                return true\n            }else{\n                return false\n            }\n        }\n        else if(tipo === 'funcionario'){\n            usuarioExistente(data, tipo)\n            .then((dados)=>{\n                if(dados.success){\n                    setUserType('func')\n                    localStorage.setItem('UserData', JSON.stringify(data))\n                    return true\n                }\n                else{\n                    return false\n                }\n            })\n        }\n        else if(tipo === 'cliente'){\n            usuarioExistente(data, tipo)\n            .then((dados)=>{\n                if(dados.success){\n                    setUserType('cli')\n                    localStorage.setItem('UserData', JSON.stringify(data))\n                    return true\n                }\n                else{\n                    return false\n                }\n            })\n        }\n    }\n\n    // const senhasFunc = async()=>{\n    //     try{\n    //         const response = await axios.get('http://localhost:8800//matSenhas')\n    //     }catch(error){\n    //         console.log(error);\n    //     }\n    // }\n\n    const isAdmin = (data)=>{\n        return (data.key === adminUser.user && data.password === adminUser.password)\n    }\n    // Aqui é onde fica a validação de usuários do tipo cliente e funcionário Davi:\n    const usuarioExistente = async (data, tipo) => {\n        try{\n            const resposta = await axios.post(\"http://localhost:8800/validarLogin\", {\n                key: data.key,\n                senha: data.password,\n                tipo_usuario: tipo\n            })\n            return resposta.data\n        }catch(err){\n            console.log(err);\n        }\n    }\n\n    // Verifica se o CPF está cadastrado no BD:\n    const existeCpf = async (cpf) =>{\n        try{\n            users.current = [{}]\n            const response = await axios.get('http://localhost:8800/clientes')\n            users.current = response.data.filter((cliente)=> cliente.cpf === cpf)\n            return (users.current.length === 1)\n        } catch(error){\n            alert(error)\n        }\n    }\n\n    return(\n        <LoginContext.Provider value={{autenticarTipoUsuario, userType, userLogOut, existeCpf}}>\n            {children}\n        </LoginContext.Provider>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}